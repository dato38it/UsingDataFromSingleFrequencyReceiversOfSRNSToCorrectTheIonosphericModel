//---------------------------------------------------------------------------
#include <fstream>
#include <iostream>

#include <vector>

#include <cmath>

#include <string.h>

#include <iomanip.h>
#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
        ifstream in ("irkj3500.txt");
        ofstream out ("out.txt");
//////// пропускаем всё до END OF HEADER
        string a;

        while(true) {
                getline (in,a);

                if(a == "                                                            END OF HEADER") {
                        break;
                }
        }
//////// пропуск времени и состояния
        // дано
        int temp;
        double temp2;
        int countSputnik;

        vector <string> Sputnik;
        vector <vector <double> > info;

        for(int i=0; i<2880; i++){
                in >> temp;
                in >> temp;
                in >> temp;
                in >> temp;
                in >> temp;
                in >> temp2;
                in >> temp;
                in >> countSputnik;
//              out << countSputnik << endl; // выводим количество спутников
////////////// считывем спутники
                // дано
                string name;
                getline(in,name);
                int index=-1;
                string tempName = "";
                vector <string> allSputnik;

                allSputnik.resize(0);
                index=-1;
                tempName = "";
                // считываем первую строку
                for(int i=0; i< name.size(); i++) {
                        if(name[i] == '-')
                        break;
                        if(name[i] >= 'A' && name[i] <= 'Z') {
                                index++;
                                if(tempName != "") {
                                        allSputnik.push_back(tempName);
                                        tempName="";
                                }
                        }
                        if (name[i] != ' '){
                                tempName = tempName + name[i];
                        }
                }
                // считывает до конца (последний спутник)
                if(tempName != "") {
                        allSputnik.push_back(tempName);
                        tempName="";
                }
/*
                for(int i=0; i<allSputnik.size(); i++){
                        out << allSputnik[i] << endl; // выводим спутники с первой строки
                }
*/
                // считываем вторую строку
                if(index <= countSputnik-1) {
                        getline(in,name);
                        for(int i=0; i<name.size(); i++){
                                if(name[i] >= 'A' && name[i] <= 'Z') {
                                        index++;
                                        if(tempName != "") {
                                                allSputnik.push_back(tempName);
                                                tempName="";
                                        }
                                }
                                if (name[i] != ' '){
                                        tempName = tempName + name[i];
                                }
                        }
                }
                // считывает до конца (последний спутник)
                if(tempName != "") {
                        allSputnik.push_back(tempName);
                        tempName="";
                }
 /*
                for(int i=0; i<allSputnik.size(); i++){
                        out << allSputnik[i] << endl; // выводим все спутники
                }   */

//////////////// считываем все псевдодальности для всех спутников для первой эпохи
                vector <double> tempVector;
                tempVector.resize(70); // сколько всего столбцов

                info.push_back(tempVector);
                for(int i = 0; i<allSputnik.size(); i++) {
                        double dalnost=0;
                        string b = "";

                        getline (in, b);
                        //out << b << endl; // выводим первую строчную инфу через строку

                        a ="";
                        if(b.size()>=14){
                                a=b.substr(1,13); // выделяем нужную ПД
                                //out << a << endl; // выводим нужную ПД
                        }


                        // дано
                        int tochka=-1;
                        int chislo=0;

                        for (int i=0; i<a.size(); i++){
                                if (a[i]>='0' && a[i]<='9'){
                                        dalnost = dalnost *10 + (a[i]-'0');
                                }
                                else {
                                        if(a[i]== '.') {
                                                tochka=i;
                                        }
                                }
                        }


                        //out << dalnost << endl; // выводим нужную ПД только с экспонентой
                        if(tochka != -1){
                                chislo = a.size()-1 - tochka;
                                chislo = (int) pow(10, (double)chislo);
                                dalnost=dalnost/chislo;
                        }   
                        getline (in,name);
                        //out << name << endl; // выводим вторую строчную инфу через строку

                        index=-1;

                        for(int j=0; j<Sputnik.size(); j++) {
                                if(allSputnik[i] == Sputnik[j]) {
                                        index = j;
                                        break;
                                }
                        }

                        if(index == -1) {
                                Sputnik.push_back(allSputnik[i]);
                                info[info.size()-1][Sputnik.size()-1] = dalnost;
                        }
                        else {
                                info[info.size()-1][index] = dalnost;
                        }
               }
         }
/*
//////// выводим красиво теперь
        for(int j=0; j<Sputnik.size(); j++) {
                out << setw(13) << Sputnik[j] << " "; // выводим названия спутников в строку
        }
        out << endl;
        
        for(int i=0; i<info.size(); i++) {
                for(int j=0; j<info[i].size(); j++) {
                        out << setw(13)  << setprecision(13) << info[i][j] << " "; // выводим ПД в строку и сортируем с ПД
                }
                out << endl;
        }
        out << endl;
*/

//////// если мы хотим вывести ПД именно для одного или двух спутников
        for(int i=0; i<info.size(); i++){
                out << setw(13) << setprecision(13) << info[i][0]/* << setw(14) << info[i][1]*/ << endl;
        }

}
//---------------------------------------------------------------------------


